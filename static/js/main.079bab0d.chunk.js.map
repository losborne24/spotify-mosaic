{"version":3,"sources":["constants.ts","components/select-playlist.tsx","components/mosaic.tsx","components/connect-to-spotify.tsx","components/select-image.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["client_id","response_type","access_token","SwiperCore","use","Navigation","Playlist","props","history","useHistory","useState","personalPlaylists","setPersonalPlaylists","publicPlaylists","setPublicPlaylists","inputPlaylistId","setInputPlaylistId","offset","setOffset","isLoadMore","setLoadMore","fetchPersonalPlaylists","axios","get","headers","Authorization","token","params","constants","fields","limit","then","res","_playlists","data","items","forEach","item","push","img","images","url","id","name","total","playlists","catch","err","console","log","useEffect","window","location","hash","split","pop","setToken","classes","makeStyles","marginLeft","marginRight","width100","width","widthXL","widthXS","playlistImage","maxHeight","maxWidth","playlistInputContainer","display","alignItems","txtFlex","justifyContent","textAlign","swiperSlide","flexDirection","cursor","loadMore","border","height","playlistContainer","publicContainer","topTracksContainer","btnTopTrackContainer","btnTopTracks","margin","useStyles","className","slidesPerView","navigation","map","index","onClick","src","alt","text","Button","variant","color","period","time_range","_tracks","fac","FastAverageColor","uniqueTracks","find","u","album","getColorAsync","avgColour","value","setTracks","TextField","label","helperText","onChange","e","target","playlistId","track","Mosaic","setWidth","setHeight","selectedTrackImage","setSelectedTrackImage","canvasRef","useRef","mosaicCanvasRef","count","draw","ctx","drawImage","mosaicCanvas","current","getContext","y","x","pixelA","getImageData","v","minDist","i","tracks","length","pixelB","dist","Math","max","pow","Image","crossOrigin","onload","toDataURL","onLoadCallback","imageSrc","size","modifier","sqrt","selectImage","hidden","ref","ReactImageMagnify","smallImage","isFluidWidth","largeImage","ConnectToSpotify","floor","random","authState","setAuthState","href","SelectImage","convertToString","imgData","createImg","component","files","file","reader","FileReader","readAsDataURL","_","a","result","type","accept","App","setImageSrc","center","path","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.079bab0d.chunk.js","sourcesContent":["export const client_id = 'f1da744b65de4f5aaa1d3e3bb881d942';\r\nexport const response_type = 'token';\r\nexport const redirect_uri =\r\n  'https://losborne24.github.io/spotify-mosaic/playlists';\r\nexport const scopes = 'user-top-read user-read-private user-read-email';\r\nexport const access_token = 'access_token=';\r\n","import axios from 'axios';\r\nimport FastAverageColor from 'fast-average-color';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as constants from '../constants';\r\nimport { TextField, Button, makeStyles } from '@material-ui/core';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n// Import Swiper styles\r\nimport 'swiper/swiper.min.css';\r\nimport 'swiper/components/navigation/navigation.min.css';\r\nimport '../styles/custom-swiper.scss';\r\n\r\nimport SwiperCore, { Navigation } from 'swiper/core';\r\n// install Swiper modules\r\nSwiperCore.use([Navigation]);\r\nconst Playlist = (props: any) => {\r\n  const history = useHistory();\r\n  const [personalPlaylists, setPersonalPlaylists] = useState([]) as any[];\r\n  const [publicPlaylists, setPublicPlaylists] = useState([]) as any[];\r\n  const [inputPlaylistId, setInputPlaylistId] = useState('');\r\n  const [offset, setOffset] = useState(0);\r\n  const [isLoadMore, setLoadMore] = useState(false);\r\n  const fetchPersonalPlaylists = () => {\r\n    axios\r\n      .get('https://api.spotify.com/v1/me/playlists', {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(name,images,id)',\r\n          response_type: constants.response_type,\r\n          limit: 10,\r\n          offset: offset,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        let _playlists: { img: any; id: any; name: any }[] = [];\r\n        if (res.data?.items) {\r\n          res.data.items.forEach((item: any) => {\r\n            _playlists.push({\r\n              img: item.images[0].url,\r\n              id: item.id,\r\n              name: item.name,\r\n            });\r\n          });\r\n        }\r\n        if (offset + 10 >= res.data?.total) {\r\n          setLoadMore(false);\r\n        } else {\r\n          setLoadMore(true);\r\n        }\r\n        setOffset((offset) => (offset += 10));\r\n        setPersonalPlaylists((playlists: any) => [...playlists, ..._playlists]);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const fetchPublicPlaylists = () => {\r\n    axios\r\n      .get('https://api.spotify.com/v1/browse/categories/toplists/playlists', {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(name,images,id)',\r\n          response_type: constants.response_type,\r\n          limit: 10,\r\n          offset: 0,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        let _playlists: { img: any; id: any; name: any }[] = [];\r\n        if (res.data?.playlists.items) {\r\n          res.data.playlists.items.forEach((item: any) => {\r\n            _playlists.push({\r\n              img: item.images[0].url,\r\n              id: item.id,\r\n              name: item.name,\r\n            });\r\n          });\r\n        }\r\n\r\n        setPublicPlaylists(_playlists);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const fetchPlaylist = (playlistId: String) => {\r\n    axios\r\n      .get(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(track(album(images,id)))',\r\n          response_type: constants.response_type,\r\n          limit: 100,\r\n          offset: 0,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        if (res.data?.items) {\r\n          const _tracks: { id: string; img: string; avgColour: any }[] = [];\r\n          const fac = new FastAverageColor();\r\n          const uniqueTracks: { id: string }[] = [];\r\n          res.data.items.forEach((item: any) => {\r\n            if (!uniqueTracks.find((u) => u.id === item.track.album.id)) {\r\n              uniqueTracks.push({ id: item.track.album.id });\r\n              fac\r\n                .getColorAsync(item.track.album.images[2].url)\r\n                .then((color) => {\r\n                  _tracks.push({\r\n                    id: item.track.album.id,\r\n                    img: item.track.album.images[2].url,\r\n                    avgColour: color.value,\r\n                  });\r\n                  // console.log(\r\n                  //   '%c avgColour',\r\n                  //   `color: rgba(${color.value[0]},${color.value[1]},${color.value[2]},${color.value[3]}`\r\n                  // );\r\n                });\r\n            }\r\n          });\r\n          props.setTracks(_tracks);\r\n          history.push('/selectImage');\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const fetchTopTracks = (period: String) => {\r\n    axios\r\n      .get('https://api.spotify.com/v1/me/top/tracks', {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          time_range: period,\r\n          limit: 50,\r\n          offset: 0,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        if (res.data?.items) {\r\n          const _tracks: { id: string; img: string; avgColour: any }[] = [];\r\n          const fac = new FastAverageColor();\r\n          const uniqueTracks: { id: string }[] = [];\r\n          res.data.items.forEach((item: any) => {\r\n            if (!uniqueTracks.find((u) => u.id === item.album.id)) {\r\n              uniqueTracks.push({ id: item.album.id });\r\n              fac.getColorAsync(item.album.images[2].url).then((color) => {\r\n                _tracks.push({\r\n                  id: item.album.id,\r\n                  img: item.album.images[2].url,\r\n                  avgColour: color.value,\r\n                });\r\n                // console.log(\r\n                //   '%c avgColour',\r\n                //   `color: rgba(${color.value[0]},${color.value[1]},${color.value[2]},${color.value[3]}`\r\n                // );\r\n              });\r\n            }\r\n          });\r\n          props.setTracks(_tracks);\r\n          history.push('/selectImage');\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      window.location.hash.split(constants.access_token).pop()?.split('&')[0]\r\n    ) {\r\n      props.setToken(\r\n        window.location.hash.split(constants.access_token).pop()?.split('&')[0]\r\n      );\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (props.token) {\r\n      fetchPersonalPlaylists();\r\n      fetchPublicPlaylists();\r\n    }\r\n  }, [props.token]);\r\n  const useStyles = makeStyles({\r\n    marginLeft: { marginLeft: '0.5rem' },\r\n    marginRight: { marginRight: '0.5rem' },\r\n    width100: { width: '100%' },\r\n    widthXL: { width: '83%' },\r\n    widthXS: { width: '17%' },\r\n    playlistImage: {\r\n      maxHeight: '14vw',\r\n      maxWidth: '14vw',\r\n    },\r\n    playlistInputContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    txtFlex: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      textAlign: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    swiperSlide: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      cursor: 'pointer',\r\n    },\r\n    loadMore: {\r\n      border: '0.1rem solid black',\r\n      height: '14vw',\r\n      width: '14vw',\r\n    },\r\n    playlistContainer: {\r\n      display: 'flex',\r\n      width: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    publicContainer: {\r\n      flexDirection: 'column',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '83%',\r\n    },\r\n    topTracksContainer: {\r\n      flexDirection: 'column',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      textAlign: 'center',\r\n      alignItems: 'center',\r\n      width: '17%',\r\n      height: '100%',\r\n    },\r\n    btnTopTrackContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n    },\r\n    btnTopTracks: { width: '100%', margin: '0.5rem' },\r\n  });\r\n  const classes = useStyles();\r\n  const yourTopTrackStrings = [\r\n    { id: 'short_term', text: 'Short Term' },\r\n    { id: 'medium_term', text: 'Medium Term' },\r\n    { id: 'long_term', text: 'Long Term' },\r\n  ];\r\n  return (\r\n    <>\r\n      <div className={classes.playlistContainer}>\r\n        <div className={`${classes.publicContainer} `}>\r\n          <h2>Public Playlists</h2>\r\n          <Swiper\r\n            slidesPerView={5}\r\n            navigation={true}\r\n            className={classes.width100}\r\n          >\r\n            {publicPlaylists.map((item: any, index: any) => {\r\n              return (\r\n                <SwiperSlide\r\n                  className={`${classes.swiperSlide}`}\r\n                  key={`swiper-slider-${index} `}\r\n                  onClick={() => {\r\n                    setInputPlaylistId(item.id);\r\n                  }}\r\n                >\r\n                  <img\r\n                    className={`${classes.playlistImage}`}\r\n                    key={`img-${index}`}\r\n                    src={item.img}\r\n                    alt=\"album cover\"\r\n                  ></img>\r\n                  <p className={classes.txtFlex}>{item.name}</p>\r\n                </SwiperSlide>\r\n              );\r\n            })}\r\n          </Swiper>\r\n        </div>\r\n        <div className={`${classes.topTracksContainer} `}>\r\n          <h2>Your Top Tracks</h2>\r\n          <div className={classes.btnTopTrackContainer}>\r\n            {yourTopTrackStrings.map((item: any, index: any) => {\r\n              return (\r\n                <Button\r\n                  className={`${classes.btnTopTracks}`}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    fetchTopTracks(item.id);\r\n                  }}\r\n                >\r\n                  {item.text}\r\n                </Button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>{' '}\r\n      </div>{' '}\r\n      <h2>Your Playlists</h2>\r\n      <Swiper slidesPerView={6} navigation={true} className={classes.width100}>\r\n        {personalPlaylists.map((item: any, index: any) => {\r\n          return (\r\n            <SwiperSlide\r\n              className={`${classes.swiperSlide}`}\r\n              key={`swiper-slider-${index} `}\r\n              onClick={() => {\r\n                setInputPlaylistId(item.id);\r\n              }}\r\n            >\r\n              <img\r\n                className={`${classes.playlistImage}`}\r\n                key={`img-${index}`}\r\n                src={item.img}\r\n                alt=\"album cover\"\r\n              ></img>\r\n              <p className={classes.txtFlex}>{item.name}</p>\r\n            </SwiperSlide>\r\n          );\r\n        })}\r\n        {isLoadMore ? (\r\n          <SwiperSlide\r\n            className={`${classes.swiperSlide}`}\r\n            onClick={() => fetchPersonalPlaylists()}\r\n          >\r\n            <div className={`${classes.loadMore} ${classes.txtFlex}`}>\r\n              <p>Load More</p>\r\n            </div>\r\n            <p></p>\r\n          </SwiperSlide>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Swiper>{' '}\r\n      <div className={classes.playlistInputContainer}>\r\n        <TextField\r\n          label=\"Enter Playlist ID\"\r\n          helperText=\"e.g. 37i9dQZEVXbNG2KDcFcKOF\"\r\n          onChange={(e) => setInputPlaylistId(e.target.value)}\r\n          className={classes.marginRight}\r\n          value={inputPlaylistId}\r\n        />\r\n        <Button\r\n          className={classes.marginLeft}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => fetchPlaylist(inputPlaylistId)}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Playlist;\r\n","import { Button } from '@material-ui/core';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport ReactImageMagnify from 'react-image-magnify';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Mosaic = (props: any) => {\r\n  const [width, setWidth] = useState(0);\r\n  const [height, setHeight] = useState(0);\r\n  const [selectedTrackImage, setSelectedTrackImage] = useState() as any[];\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const mosaicCanvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const history = useHistory();\r\n\r\n  const selectImage = (img: any) => {\r\n    let height = img.height;\r\n    let width = img.width;\r\n    if (width * height > 10000) {\r\n      let size = width * height;\r\n      let modifier = Math.sqrt(size / 10000);\r\n      img.height /= modifier;\r\n      img.width /= modifier;\r\n      setHeight(img.height);\r\n      setWidth(img.width);\r\n    }\r\n    const ctx = canvasRef.current?.getContext('2d');\r\n    draw(ctx, img);\r\n  };\r\n  let count = 0;\r\n  const onLoadCallback = (img: any) => {\r\n    count++;\r\n    if (count === img.width * img.height) {\r\n      if (mosaicCanvasRef.current) {\r\n        setSelectedTrackImage(mosaicCanvasRef.current.toDataURL());\r\n        count = 0;\r\n      }\r\n    }\r\n  };\r\n  const draw = (ctx: any, img: { width: number; height: number }) => {\r\n    ctx.drawImage(img, 0, 0, img.width, img.height);\r\n    const mosaicCanvas = mosaicCanvasRef.current?.getContext('2d');\r\n    for (let y = 0; y < img.height; y++) {\r\n      for (let x = 0; x < img.width; x++) {\r\n        let pixelA = [...ctx.getImageData(x, y, 1, 1).data];\r\n        pixelA[3] /= 255;\r\n        for (let v = 0; v < 3; v++) {\r\n          pixelA[v] = (pixelA[v] * pixelA[3]) / 255;\r\n        }\r\n        let minDist = -1;\r\n        let index = 0;\r\n        for (let i = 0; i < props.tracks.length; i++) {\r\n          let pixelB = [...props.tracks[i].avgColour];\r\n          pixelB[3] /= 255;\r\n          for (let v = 0; v < 3; v++) {\r\n            pixelB[v] = (pixelB[v] * pixelB[3]) / 255;\r\n          }\r\n          let dist =\r\n            Math.max(\r\n              Math.pow(pixelA[0] - pixelB[0], 2),\r\n              Math.pow(pixelA[0] - pixelB[0] - pixelA[3] + pixelB[3], 2)\r\n            ) +\r\n            Math.max(\r\n              Math.pow(pixelA[1] - pixelB[1], 2),\r\n              Math.pow(pixelA[1] - pixelB[1] - pixelA[3] + pixelB[3], 2)\r\n            ) +\r\n            Math.max(\r\n              Math.pow(pixelA[2] - pixelB[2], 2),\r\n              Math.pow(pixelA[2] - pixelB[2] - pixelA[3] + pixelB[3], 2)\r\n            );\r\n          if (minDist === -1) {\r\n            minDist = dist;\r\n            index = i;\r\n          } else if (dist < minDist) {\r\n            minDist = dist;\r\n            index = i;\r\n          }\r\n        }\r\n        let album = new Image();\r\n        album.crossOrigin = 'anonymous';\r\n        album.src = props.tracks[index].img;\r\n        album.onload = () => {\r\n          mosaicCanvas?.drawImage(\r\n            album,\r\n            x * 64,\r\n            y * 64,\r\n            album.width,\r\n            album.height\r\n          );\r\n          onLoadCallback(img);\r\n        };\r\n      }\r\n    }\r\n  };\r\n  const grid = {\r\n    display: 'grid',\r\n    gridTemplateColumns: `repeat(${width}, 1fr)`,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.imageSrc) {\r\n      let img = new Image();\r\n      img.src = props.imageSrc;\r\n      img.onload = () => {\r\n        selectImage(img);\r\n      };\r\n    }\r\n  }, [props.img]);\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/playlists');\r\n        }}\r\n      >\r\n        Select New Playlist\r\n      </Button>\r\n      <Button\r\n        onClick={() => {\r\n          history.push('/selectImage');\r\n        }}\r\n      >\r\n        Upload New Image\r\n      </Button>\r\n      <canvas hidden ref={canvasRef} width={width} height={height}></canvas>\r\n      <canvas\r\n        hidden\r\n        ref={mosaicCanvasRef}\r\n        width={width * 64}\r\n        height={height * 64}\r\n      ></canvas>\r\n      <ReactImageMagnify\r\n        {...{\r\n          smallImage: {\r\n            alt: 'Mosaic',\r\n            width: width * 8,\r\n            height: height * 8,\r\n            isFluidWidth: false,\r\n            src: selectedTrackImage,\r\n          },\r\n          largeImage: {\r\n            src: selectedTrackImage,\r\n            width: width * 64,\r\n            height: height * 64,\r\n          },\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Mosaic;\r\n","import { useState } from 'react';\r\nimport * as constants from '../constants';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// const axios = require('axios');\r\n\r\nconst ConnectToSpotify = () => {\r\n  const [authState, setAuthState] = useState(\r\n    Math.floor(Math.random() * 10000000)\r\n  );\r\n\r\n  const connectToSpotify = () => {\r\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${constants.client_id}&redirect_uri=${constants.redirect_uri}&response_type=${constants.response_type}&scope=${constants.scopes}&state=${authState}`;\r\n\r\n    setAuthState(Math.floor(Math.random() * 10000000));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={connectToSpotify}>\r\n        Connect to Spotify\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\nexport default ConnectToSpotify;\r\n","import { Button } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst SelectImage = (props: any) => {\r\n  const history = useHistory();\r\n\r\n  const onFileUpload = (e: any) => {\r\n    if (e.target.files.length > 0) {\r\n      let file = e.target.files[0];\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = async (_) => {\r\n        let imgData = reader.result;\r\n        await convertToString(imgData);\r\n        history.push('/createMosaic');\r\n      };\r\n    }\r\n  };\r\n  const convertToString = (imgData: any) => {\r\n    props.createImg(imgData);\r\n  };\r\n  return (\r\n    <>\r\n      <Button variant=\"contained\" color=\"primary\" component=\"label\">\r\n        Select Image\r\n        <input hidden onChange={onFileUpload} type=\"file\" accept=\"image/*\" />\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\nexport default SelectImage;\r\n","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Playlist from './components/select-playlist';\r\nimport { useState } from 'react';\r\nimport Mosaic from './components/mosaic';\r\nimport ConnectToSpotify from './components/connect-to-spotify';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport SelectImage from './components/select-image';\r\nconst App = () => {\r\n  const [imageSrc, setImageSrc] = useState<any>();\r\n  const [token, setToken] = useState('');\r\n  const [tracks, setTracks] = useState([{ id: '', img: '', avgColour: null }]);\r\n  const createImg = (imageSrc: any) => {\r\n    setImageSrc(imageSrc);\r\n  };\r\n  const useStyles = makeStyles({\r\n    center: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      height: '100%',\r\n      width: '100%',\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/playlists\">\r\n          <div className={classes.center}>\r\n            <Playlist setToken={setToken} token={token} setTracks={setTracks} />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/selectImage\">\r\n          <div className={classes.center}>\r\n            <SelectImage createImg={(src: any) => createImg(src)} />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/createMosaic\">\r\n          <Mosaic tracks={tracks} imageSrc={imageSrc} />\r\n        </Route>\r\n        <Route path={process.env.PUBLIC_URL + '/'}>\r\n          <div className={classes.center}>\r\n            <ConnectToSpotify />\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}