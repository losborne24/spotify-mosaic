{"version":3,"sources":["constants.ts","components/select-playlist.tsx","components/mosaic.tsx","assets/spotify.png","components/connect-to-spotify.tsx","components/select-image.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["client_id","response_type","access_token","SwiperCore","use","Navigation","Playlist","props","history","useHistory","useState","personalPlaylists","setPersonalPlaylists","publicPlaylists","setPublicPlaylists","inputPlaylistId","setInputPlaylistId","offset","setOffset","isLoadMore","setLoadMore","fetchPersonalPlaylists","axios","get","headers","Authorization","token","params","constants","fields","limit","then","res","_playlists","data","items","forEach","item","push","img","images","url","id","name","total","playlists","catch","err","console","log","useEffect","window","location","hash","includes","split","pop","localStorage","setItem","setToken","getItem","classes","makeStyles","marginLeft","marginRight","width100","width","widthXL","widthXS","playlistImage","maxHeight","maxWidth","playlistInputContainer","display","alignItems","txtFlex","justifyContent","textAlign","swiperSlide","flexDirection","cursor","loadMore","border","height","playlistContainer","publicContainer","topTracksContainer","btnTopTrackContainer","btnTopTracks","margin","useStyles","className","slidesPerView","navigation","map","index","onClick","src","alt","text","Button","variant","color","period","time_range","setFetchMoreUrl","_tracks","fac","FastAverageColor","uniqueTracks","find","u","album","getColorAsync","avgColour","value","length","setTracks","returnToMosaic","TextField","label","helperText","onChange","e","target","playlistId","track","setUniqueTracks","Mosaic","setWidth","setHeight","isLoadingMosaic","setIsLoadingMosaic","selectedTrackImage","setSelectedTrackImage","canvasRef","useRef","mosaicCanvasRef","setValue","count","draw","ctx","drawImage","mosaicCanvas","current","getContext","y","x","pixelA","getImageData","v","minDist","i","tracks","pixelB","dist","Math","max","pow","Image","crossOrigin","onload","toDataURL","onLoadCallback","imageSrc","size","modifier","sqrt","selectImage","scrollContainer","outerContainer","gridTemplateRows","mosaicContainer","minHeight","buttonContainer","sliderContainer","loadingContainer","position","left","top","transform","setReturnToMosaic","disabled","fetchMoreUrl","link","document","createElement","href","setAttribute","body","appendChild","click","hidden","ref","CircularProgress","Slider","event","newValue","min","ConnectToSpotify","floor","random","authState","setAuthState","spotifyImg","spotifyMosaicImg","SelectImage","convertToString","imgData","createImg","component","files","file","reader","FileReader","readAsDataURL","_","a","result","type","accept","App","setImageSrc","center","basename","process","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85b62c0e.chunk.js","sourcesContent":["export const client_id = 'f1da744b65de4f5aaa1d3e3bb881d942';\r\nexport const response_type = 'token';\r\nexport const redirect_uri =\r\n  process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:3000/'\r\n    : 'https://losborne24.github.io/spotify-mosaic/';\r\nexport const scopes = 'user-top-read user-read-private user-read-email';\r\nexport const access_token = 'access_token=';\r\n","import axios from 'axios';\r\nimport FastAverageColor from 'fast-average-color';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as constants from '../constants';\r\nimport { TextField, Button, makeStyles } from '@material-ui/core';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper.min.css';\r\nimport 'swiper/components/navigation/navigation.min.css';\r\nimport '../styles/custom-swiper.scss';\r\n\r\nimport SwiperCore, { Navigation } from 'swiper/core';\r\nSwiperCore.use([Navigation]);\r\nconst Playlist = (props: any) => {\r\n  const history = useHistory();\r\n  const [personalPlaylists, setPersonalPlaylists] = useState([]) as any[];\r\n  const [publicPlaylists, setPublicPlaylists] = useState([]) as any[];\r\n  const [inputPlaylistId, setInputPlaylistId] = useState('');\r\n  const [offset, setOffset] = useState(0);\r\n  const [isLoadMore, setLoadMore] = useState(false);\r\n  const fetchPersonalPlaylists = () => {\r\n    axios\r\n      .get('https://api.spotify.com/v1/me/playlists', {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(name,images,id)',\r\n          response_type: constants.response_type,\r\n          limit: 10,\r\n          offset: offset,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        let _playlists: { img: any; id: any; name: any }[] = [];\r\n        if (res.data?.items) {\r\n          res.data.items.forEach((item: any) => {\r\n            _playlists.push({\r\n              img: item.images[0].url,\r\n              id: item.id,\r\n              name: item.name,\r\n            });\r\n          });\r\n        }\r\n        if (offset + 10 >= res.data?.total) {\r\n          setLoadMore(false);\r\n        } else {\r\n          setLoadMore(true);\r\n        }\r\n        setOffset((offset) => (offset += 10));\r\n        setPersonalPlaylists((playlists: any) => [...playlists, ..._playlists]);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const fetchPublicPlaylists = () => {\r\n    axios\r\n      .get('https://api.spotify.com/v1/browse/categories/toplists/playlists', {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(name,images,id)',\r\n          response_type: constants.response_type,\r\n          limit: 10,\r\n          offset: 0,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        let _playlists: { img: any; id: any; name: any }[] = [];\r\n        if (res.data?.playlists.items) {\r\n          res.data.playlists.items.forEach((item: any) => {\r\n            _playlists.push({\r\n              img: item.images[0].url,\r\n              id: item.id,\r\n              name: item.name,\r\n            });\r\n          });\r\n        }\r\n\r\n        setPublicPlaylists(_playlists);\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const fetchPlaylist = (playlistId: String) => {\r\n    axios\r\n      .get(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(track(album(images,id))),total',\r\n          response_type: constants.response_type,\r\n          limit: 100,\r\n          offset: 0,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        if (res.data?.items) {\r\n          if (res.data.total > 100) {\r\n            props.setFetchMoreUrl(\r\n              `https://api.spotify.com/v1/playlists/${playlistId}/tracks`\r\n            );\r\n          }\r\n          const _tracks: { id: string; img: string; avgColour: any }[] = [];\r\n          const fac = new FastAverageColor();\r\n          const uniqueTracks: any[] = [];\r\n          res.data.items.forEach((item: any) => {\r\n            if (\r\n              !uniqueTracks.find(\r\n                (u) => u.track.album.id === item.track.album.id\r\n              )\r\n            ) {\r\n              uniqueTracks.push(item);\r\n            }\r\n          });\r\n          props.setUniqueTracks(uniqueTracks);\r\n\r\n          uniqueTracks.forEach((item: any) => {\r\n            fac.getColorAsync(item.track.album.images[2].url).then((color) => {\r\n              _tracks.push({\r\n                id: item.track.album.id,\r\n                img: item.track.album.images[2].url,\r\n                avgColour: color.value,\r\n              });\r\n              if (_tracks.length === uniqueTracks.length) {\r\n                props.setTracks(_tracks);\r\n                if (props.returnToMosaic) {\r\n                  history.push('/createMosaic');\r\n                } else {\r\n                  history.push('/selectImage');\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  const fetchTopTracks = (period: String) => {\r\n    axios\r\n      .get('https://api.spotify.com/v1/me/top/tracks', {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          time_range: period,\r\n          limit: 50,\r\n          offset: 0,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        if (res.data?.items) {\r\n          props.setFetchMoreUrl(null);\r\n\r\n          const _tracks: { id: string; img: string; avgColour: any }[] = [];\r\n          const fac = new FastAverageColor();\r\n          const uniqueTracks: any[] = [];\r\n          res.data.items.forEach((item: any) => {\r\n            if (!uniqueTracks.find((u) => u.album.id === item.album.id)) {\r\n              uniqueTracks.push(item);\r\n            }\r\n          });\r\n          uniqueTracks.forEach((item: any) => {\r\n            fac.getColorAsync(item.album.images[2].url).then((color) => {\r\n              _tracks.push({\r\n                id: item.album.id,\r\n                img: item.album.images[2].url,\r\n                avgColour: color.value,\r\n              });\r\n              if (_tracks.length === uniqueTracks.length) {\r\n                props.setTracks(_tracks);\r\n                if (props.returnToMosaic) {\r\n                  history.push('/createMosaic');\r\n                } else {\r\n                  history.push('/selectImage');\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (window.location.hash.includes(constants.access_token)) {\r\n      const token = window.location.hash\r\n        .split(constants.access_token)\r\n        .pop()\r\n        ?.split('&')[0];\r\n      if (token) localStorage.setItem('token', token);\r\n      props.setToken(token);\r\n    } else {\r\n      props.setToken(localStorage.getItem('token'));\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (props.token) {\r\n      fetchPersonalPlaylists();\r\n      fetchPublicPlaylists();\r\n    }\r\n  }, [props.token]);\r\n  const useStyles = makeStyles({\r\n    marginLeft: { marginLeft: '0.5rem' },\r\n    marginRight: { marginRight: '0.5rem' },\r\n    width100: { width: '100%' },\r\n    widthXL: { width: '83%' },\r\n    widthXS: { width: '17%' },\r\n    playlistImage: {\r\n      maxHeight: '14vw',\r\n      maxWidth: '14vw',\r\n    },\r\n    playlistInputContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    txtFlex: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      textAlign: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    swiperSlide: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      cursor: 'pointer',\r\n    },\r\n    loadMore: {\r\n      border: '0.1rem solid black',\r\n      height: '14vw',\r\n      width: '14vw',\r\n    },\r\n    playlistContainer: {\r\n      display: 'flex',\r\n      width: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    publicContainer: {\r\n      flexDirection: 'column',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '83%',\r\n    },\r\n    topTracksContainer: {\r\n      flexDirection: 'column',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      textAlign: 'center',\r\n      alignItems: 'center',\r\n      width: '17%',\r\n      height: '100%',\r\n    },\r\n    btnTopTrackContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n    },\r\n    btnTopTracks: { width: '100%', margin: '0.5rem' },\r\n  });\r\n  const classes = useStyles();\r\n  const yourTopTrackStrings = [\r\n    { id: 'short_term', text: 'Short Term' },\r\n    { id: 'medium_term', text: 'Medium Term' },\r\n    { id: 'long_term', text: 'Long Term' },\r\n  ];\r\n  return (\r\n    <>\r\n      <div className={classes.playlistContainer}>\r\n        <div className={`${classes.publicContainer} `}>\r\n          <h2>Public Playlists</h2>\r\n          <Swiper\r\n            slidesPerView={5}\r\n            navigation={true}\r\n            className={classes.width100}\r\n          >\r\n            {publicPlaylists.map((item: any, index: any) => {\r\n              return (\r\n                <SwiperSlide\r\n                  className={`${classes.swiperSlide}`}\r\n                  key={`swiper-slider-${index} `}\r\n                  onClick={() => {\r\n                    setInputPlaylistId(item.id);\r\n                  }}\r\n                >\r\n                  <img\r\n                    className={`${classes.playlistImage}`}\r\n                    key={`img-${index}`}\r\n                    src={item.img}\r\n                    alt=\"album cover\"\r\n                  ></img>\r\n                  <p className={classes.txtFlex}>{item.name}</p>\r\n                </SwiperSlide>\r\n              );\r\n            })}\r\n          </Swiper>\r\n        </div>\r\n        <div className={`${classes.topTracksContainer} `}>\r\n          <h2>Your Top Tracks</h2>\r\n          <div className={classes.btnTopTrackContainer}>\r\n            {yourTopTrackStrings.map((item: any, index: any) => {\r\n              return (\r\n                <Button\r\n                  className={`${classes.btnTopTracks}`}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    fetchTopTracks(item.id);\r\n                  }}\r\n                >\r\n                  {item.text}\r\n                </Button>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>{' '}\r\n      </div>{' '}\r\n      <h2>Your Playlists</h2>\r\n      <Swiper slidesPerView={6} navigation={true} className={classes.width100}>\r\n        {personalPlaylists.map((item: any, index: any) => {\r\n          return (\r\n            <SwiperSlide\r\n              className={`${classes.swiperSlide}`}\r\n              key={`swiper-slider-${index} `}\r\n              onClick={() => {\r\n                setInputPlaylistId(item.id);\r\n              }}\r\n            >\r\n              <img\r\n                className={`${classes.playlistImage}`}\r\n                key={`img-${index}`}\r\n                src={item.img}\r\n                alt=\"album cover\"\r\n              ></img>\r\n              <p className={classes.txtFlex}>{item.name}</p>\r\n            </SwiperSlide>\r\n          );\r\n        })}\r\n        {isLoadMore ? (\r\n          <SwiperSlide\r\n            className={`${classes.swiperSlide}`}\r\n            onClick={() => fetchPersonalPlaylists()}\r\n          >\r\n            <div className={`${classes.loadMore} ${classes.txtFlex}`}>\r\n              <p>Load More</p>\r\n            </div>\r\n            <p></p>\r\n          </SwiperSlide>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </Swiper>{' '}\r\n      <div className={classes.playlistInputContainer}>\r\n        <TextField\r\n          label=\"Enter Playlist ID\"\r\n          helperText=\"e.g. 37i9dQZEVXbNG2KDcFcKOF\"\r\n          onChange={(e) => setInputPlaylistId(e.target.value)}\r\n          className={classes.marginRight}\r\n          value={inputPlaylistId}\r\n        />\r\n        <Button\r\n          className={classes.marginLeft}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => fetchPlaylist(inputPlaylistId)}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Playlist;\r\n","import { Button, makeStyles } from '@material-ui/core';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\nimport axios from 'axios';\r\nimport * as constants from '../constants';\r\nimport FastAverageColor from 'fast-average-color';\r\n\r\nconst Mosaic = (props: any) => {\r\n  const [width, setWidth] = useState(0);\r\n  const [height, setHeight] = useState(0);\r\n  const [offset, setOffset] = useState(100);\r\n  const [isLoadingMosaic, setIsLoadingMosaic] = useState(true);\r\n  const [selectedTrackImage, setSelectedTrackImage] = useState<any>();\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const mosaicCanvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const history = useHistory();\r\n  const [value, setValue] = useState<number>(10);\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n  const selectImage = (img: any) => {\r\n    let height = img.height;\r\n    let width = img.width;\r\n\r\n    if (width * height > 10000) {\r\n      let size = width * height;\r\n      let modifier = Math.sqrt(size / 10000);\r\n      img.height /= modifier;\r\n      img.width /= modifier;\r\n      setHeight(img.height);\r\n      setWidth(img.width);\r\n    }\r\n    const ctx = canvasRef.current?.getContext('2d');\r\n    draw(ctx, img);\r\n  };\r\n  let count = 0;\r\n  const onLoadCallback = (img: any) => {\r\n    count++;\r\n    if (count === img.width * img.height) {\r\n      if (mosaicCanvasRef.current) {\r\n        setSelectedTrackImage(mosaicCanvasRef.current.toDataURL());\r\n        count = 0;\r\n        setIsLoadingMosaic(false);\r\n      }\r\n    }\r\n  };\r\n  const draw = (ctx: any, img: { width: number; height: number }) => {\r\n    ctx.drawImage(img, 0, 0, img.width, img.height);\r\n    const mosaicCanvas = mosaicCanvasRef.current?.getContext('2d');\r\n    for (let y = 0; y < img.height; y++) {\r\n      for (let x = 0; x < img.width; x++) {\r\n        let pixelA = [...ctx.getImageData(x, y, 1, 1).data];\r\n        pixelA[3] /= 255;\r\n        for (let v = 0; v < 3; v++) {\r\n          pixelA[v] = (pixelA[v] * pixelA[3]) / 255;\r\n        }\r\n        let minDist = -1;\r\n        let index = 0;\r\n        for (let i = 0; i < props.tracks.length; i++) {\r\n          let pixelB = [...props.tracks[i].avgColour];\r\n          pixelB[3] /= 255;\r\n          for (let v = 0; v < 3; v++) {\r\n            pixelB[v] = (pixelB[v] * pixelB[3]) / 255;\r\n          }\r\n          let dist =\r\n            Math.max(\r\n              Math.pow(pixelA[0] - pixelB[0], 2),\r\n              Math.pow(pixelA[0] - pixelB[0] - pixelA[3] + pixelB[3], 2)\r\n            ) +\r\n            Math.max(\r\n              Math.pow(pixelA[1] - pixelB[1], 2),\r\n              Math.pow(pixelA[1] - pixelB[1] - pixelA[3] + pixelB[3], 2)\r\n            ) +\r\n            Math.max(\r\n              Math.pow(pixelA[2] - pixelB[2], 2),\r\n              Math.pow(pixelA[2] - pixelB[2] - pixelA[3] + pixelB[3], 2)\r\n            );\r\n          if (minDist === -1) {\r\n            minDist = dist;\r\n            index = i;\r\n          } else if (dist < minDist) {\r\n            minDist = dist;\r\n            index = i;\r\n          }\r\n        }\r\n        let album = new Image();\r\n        album.crossOrigin = 'anonymous';\r\n        album.src = props.tracks[index].img;\r\n        album.onload = () => {\r\n          mosaicCanvas?.drawImage(\r\n            album,\r\n            x * 64,\r\n            y * 64,\r\n            album.width,\r\n            album.height\r\n          );\r\n          onLoadCallback(img);\r\n        };\r\n      }\r\n    }\r\n  };\r\n  const fetchMoreTracks = () => {\r\n    axios\r\n      .get(props.fetchMoreUrl, {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(track(album(images,id))),total',\r\n          response_type: constants.response_type,\r\n          limit: 100,\r\n          offset: offset,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        if (res.data?.items) {\r\n          if (res.data.total > offset + 100) {\r\n            setOffset(offset + 100);\r\n          } else {\r\n            props.setFetchMoreUrl(null);\r\n          }\r\n          const _tracks: { id: string; img: string; avgColour: any }[] = [];\r\n          const fac = new FastAverageColor();\r\n          const uniqueTracks: any[] = props.uniqueTracks;\r\n          res.data.items.forEach((item: any) => {\r\n            if (\r\n              !uniqueTracks.find(\r\n                (u) => u.track.album.id === item.track.album.id\r\n              )\r\n            ) {\r\n              uniqueTracks.push(item);\r\n            }\r\n          });\r\n          props.setUniqueTracks(uniqueTracks);\r\n          uniqueTracks.forEach((item: any) => {\r\n            fac.getColorAsync(item.track.album.images[2].url).then((color) => {\r\n              _tracks.push({\r\n                id: item.track.album.id,\r\n                img: item.track.album.images[2].url,\r\n                avgColour: color.value,\r\n              });\r\n              if (_tracks.length === uniqueTracks.length) {\r\n                props.setTracks([...props.tracks, ..._tracks]);\r\n                setIsLoadingMosaic(true);\r\n              }\r\n            });\r\n          });\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.imageSrc) {\r\n      let img = new Image();\r\n      img.src = props.imageSrc;\r\n      img.onload = () => {\r\n        selectImage(img);\r\n      };\r\n    }\r\n  }, [props.img, props.tracks]);\r\n\r\n  const useStyles = makeStyles({\r\n    scrollContainer: {\r\n      maxHeight: '100%',\r\n      maxWidth: '100%',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    outerContainer: {\r\n      display: 'grid',\r\n      gridTemplateRows: 'auto 1fr',\r\n      height: '100%',\r\n    },\r\n    mosaicContainer: {\r\n      display: 'grid',\r\n      gridTemplateRows: '1fr auto',\r\n      height: '100%',\r\n      minHeight: '0',\r\n    },\r\n    buttonContainer: {\r\n      display: 'flex',\r\n      margin: '2rem 1.5rem',\r\n      '& > *': {\r\n        margin: '0 0.5rem',\r\n      },\r\n    },\r\n    sliderContainer: {\r\n      margin: '2rem 4rem',\r\n    },\r\n    loadingContainer: {\r\n      position: 'absolute',\r\n      left: '50%',\r\n      top: '50%',\r\n      transform: 'translate(-50%,-50%)',\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.outerContainer}>\r\n      <div className={classes.buttonContainer}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            props.setReturnToMosaic(true);\r\n            history.push('/playlists');\r\n          }}\r\n        >\r\n          Select New Playlist\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            history.push('/selectImage');\r\n          }}\r\n        >\r\n          Upload New Image\r\n        </Button>\r\n        <Button\r\n          disabled={isLoadingMosaic || props.fetchMoreUrl === null}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={fetchMoreTracks}\r\n        >\r\n          Fetch More Tracks\r\n        </Button>\r\n        <Button\r\n          disabled={isLoadingMosaic}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            const link = document.createElement('a');\r\n            link.href = selectedTrackImage;\r\n            link.setAttribute('download', 'mosaic.png'); //or any other extension\r\n            document.body.appendChild(link);\r\n            link.click();\r\n          }}\r\n        >\r\n          Download Mosaic\r\n        </Button>\r\n      </div>\r\n\r\n      <canvas hidden ref={canvasRef} width={width} height={height}></canvas>\r\n      <canvas\r\n        hidden\r\n        ref={mosaicCanvasRef}\r\n        width={width * 64}\r\n        height={height * 64}\r\n      ></canvas>\r\n      {isLoadingMosaic ? (\r\n        <div className={classes.loadingContainer}>\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        <div className={classes.mosaicContainer}>\r\n          <ScrollContainer className={classes.scrollContainer}>\r\n            <img\r\n              src={selectedTrackImage}\r\n              width={width * value}\r\n              height={height * value}\r\n            ></img>\r\n          </ScrollContainer>\r\n          <div className={classes.sliderContainer}>\r\n            <Slider\r\n              value={value}\r\n              onChange={handleChange}\r\n              aria-labelledby=\"continuous-slider\"\r\n              min={1}\r\n              max={64}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Mosaic;\r\n","export default __webpack_public_path__ + \"static/media/spotify.43abc2c0.png\";","import { useState } from 'react';\r\nimport * as constants from '../constants';\r\nimport Button from '@material-ui/core/Button';\r\nimport spotifyMosaicImg from '../assets/spotify.png';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\n// const axios = require('axios');\r\n\r\nconst ConnectToSpotify = () => {\r\n  const [authState, setAuthState] = useState(\r\n    Math.floor(Math.random() * 10000000)\r\n  );\r\n\r\n  const connectToSpotify = () => {\r\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${constants.client_id}&response_type=${constants.response_type}&scope=${constants.scopes}&state=${authState}&redirect_uri=${constants.redirect_uri}`;\r\n\r\n    setAuthState(Math.floor(Math.random() * 10000000));\r\n  };\r\n  const useStyles = makeStyles({\r\n    scrollContainer: {\r\n      maxHeight: '80%',\r\n      maxWidth: '80%',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    spotifyImg: { height: '100vh', width: '100vh' },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <ScrollContainer className={classes.scrollContainer}>\r\n        <img src={spotifyMosaicImg} className={classes.spotifyImg}></img>\r\n      </ScrollContainer>\r\n\r\n      <h1>Spotify Mosaic</h1>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={connectToSpotify}>\r\n        Connect to Spotify\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\nexport default ConnectToSpotify;\r\n","import { Button } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst SelectImage = (props: any) => {\r\n  const history = useHistory();\r\n\r\n  const onFileUpload = (e: any) => {\r\n    if (e.target.files.length > 0) {\r\n      let file = e.target.files[0];\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = async (_) => {\r\n        let imgData = reader.result;\r\n        await convertToString(imgData);\r\n        history.push('/createMosaic');\r\n      };\r\n    }\r\n  };\r\n  const convertToString = (imgData: any) => {\r\n    props.createImg(imgData);\r\n  };\r\n  return (\r\n    <>\r\n      <Button variant=\"contained\" color=\"primary\" component=\"label\">\r\n        Select Image\r\n        <input hidden onChange={onFileUpload} type=\"file\" accept=\"image/*\" />\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\nexport default SelectImage;\r\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Playlist from './components/select-playlist';\r\nimport { useState } from 'react';\r\nimport Mosaic from './components/mosaic';\r\nimport ConnectToSpotify from './components/connect-to-spotify';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport SelectImage from './components/select-image';\r\nconst App = () => {\r\n  const [imageSrc, setImageSrc] = useState<any>();\r\n  const [fetchMoreUrl, setFetchMoreUrl] = useState<string | null>(null);\r\n  const [uniqueTracks, setUniqueTracks] = useState<any[]>([]);\r\n  const [token, setToken] = useState('');\r\n  const [tracks, setTracks] = useState([{ id: '', img: '', avgColour: null }]);\r\n  const [returnToMosaic, setReturnToMosaic] = useState<boolean>(false);\r\n\r\n  const createImg = (imageSrc: any) => {\r\n    setImageSrc(imageSrc);\r\n  };\r\n  const useStyles = makeStyles({\r\n    center: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      height: '100%',\r\n      width: '100%',\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route path=\"/playlists\">\r\n          <div className={classes.center}>\r\n            <Playlist\r\n              setToken={setToken}\r\n              token={token}\r\n              setTracks={setTracks}\r\n              returnToMosaic={returnToMosaic}\r\n              setFetchMoreUrl={setFetchMoreUrl}\r\n              setUniqueTracks={setUniqueTracks}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/:access_token(access_token=.*)\">\r\n          <div className={classes.center}>\r\n            <Playlist\r\n              setToken={setToken}\r\n              token={token}\r\n              setTracks={setTracks}\r\n              returnToMosaic={returnToMosaic}\r\n              setFetchMoreUrl={setFetchMoreUrl}\r\n              setUniqueTracks={setUniqueTracks}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/selectImage\">\r\n          <div className={classes.center}>\r\n            <SelectImage createImg={(src: any) => createImg(src)} />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/createMosaic\">\r\n          <Mosaic\r\n            fetchMoreUrl={fetchMoreUrl}\r\n            setFetchMoreUrl={setFetchMoreUrl}\r\n            token={token}\r\n            tracks={tracks}\r\n            imageSrc={imageSrc}\r\n            setReturnToMosaic={setReturnToMosaic}\r\n            setUniqueTracks={setUniqueTracks}\r\n            uniqueTracks={uniqueTracks}\r\n            setTracks={setTracks}\r\n          />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <div className={classes.center}>\r\n            <ConnectToSpotify />\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}