{"version":3,"sources":["constants.ts","components/select-playlist.tsx","components/mosaic.tsx","assets/spotify.png","components/connect-to-spotify.tsx","components/select-image.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["client_id","response_type","access_token","state_res","create_mosaic_url","select_playlist_url","select_image_url","SwiperCore","use","Navigation","Playlist","props","playlistType","trackType","history","useHistory","useState","personalPlaylists","setPersonalPlaylists","isLoadingPersonalPlaylists","setIsLoadingPersonalPlaylists","isLoadingPublicPlaylists","setIsLoadingPublicPlaylists","publicPlaylists","setPublicPlaylists","inputPlaylistId","setInputPlaylistId","offsetPlaylists","setOffsetPlaylists","isLoadMorePlaylists","setLoadMorePlaylists","fetchPlaylists","pType","reqUrl","public","axios","get","headers","Authorization","token","params","constants","fields","limit","offset","then","res","_playlists","data","playlists","items","forEach","item","push","img","images","url","id","name","total","catch","err","console","log","fetchTracks","tType","playlist","reqParams","time_range","setFetchMoreUrl","_tracks","fac","FastAverageColor","uniqueTracks","find","u","track","album","setUniqueTracks","trackItem","getColorAsync","color","avgColour","value","length","setTracks","returnToMosaic","useEffect","stateRes","window","location","hash","includes","split","pop","localStorage","getItem","setItem","setToken","personal","classes","makeStyles","marginLeft","txtPlaylistUrl","marginRight","flexBasis","width100","width","playlistImage","maxHeight","maxWidth","playlistInputContainer","display","alignItems","justifyContent","txtFlex","textAlign","swiperSlide","flexDirection","cursor","loadMore","border","height","playlistContainer","publicContainer","topTracksContainer","btnTopTrackContainer","btnTopTracks","margin","loadingContainer","position","left","top","transform","useStyles","className","CircularProgress","slidesPerView","navigation","map","index","onClick","src","alt","text","Button","variant","TextField","label","helperText","onChange","e","target","Mosaic","setWidth","setHeight","setOffset","isLoadingMosaic","setIsLoadingMosaic","selectedTrackImage","setSelectedTrackImage","canvasRef","useRef","mosaicCanvasRef","setValue","count","draw","ctx","drawImage","mosaicCanvas","current","getContext","y","x","pixelA","getImageData","v","minDist","i","tracks","pixelB","dist","Math","max","pow","Image","crossOrigin","onload","toDataURL","onLoadCallback","imageSrc","size","modifier","sqrt","selectImage","scrollContainer","outerContainer","gridTemplateRows","mosaicContainer","minHeight","buttonContainer","overflowX","sliderContainer","setReturnToMosaic","disabled","fetchMoreUrl","link","document","createElement","href","setAttribute","body","appendChild","click","hidden","ref","Slider","event","newValue","min","ConnectToSpotify","spotifyImg","btnConnect","spotifyMosaicImg","authState","String","floor","random","SelectImage","convertToString","imgData","createImg","component","files","file","reader","FileReader","readAsDataURL","_","a","result","type","accept","createBrowserHistory","listen","ReactGA","send","pathname","search","App","setImageSrc","initialize","center","basename","process","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c4975cb8.chunk.js","sourcesContent":["export const client_id = 'f1da744b65de4f5aaa1d3e3bb881d942';\r\nexport const response_type = 'token';\r\nexport const redirect_uri =\r\n  process.env.NODE_ENV === 'development'\r\n    ? 'http://localhost:3000/'\r\n    : 'https://losborne24.github.io/spotify-mosaic/';\r\nexport const scopes = 'user-top-read user-read-private user-read-email';\r\nexport const access_token = 'access_token=';\r\nexport const state_res = 'state=';\r\nexport const playlists_page_size = 10;\r\nexport const tracks_page_size = 100;\r\nexport const top_tracks_page_size = 50;\r\nexport const create_mosaic_url = '/createMosaic';\r\nexport const select_playlist_url = '/playlists';\r\nexport const select_image_url = '/selectImage';\r\n","import axios from 'axios';\r\nimport FastAverageColor from 'fast-average-color';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as constants from '../constants';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  makeStyles,\r\n  CircularProgress,\r\n} from '@material-ui/core';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper.min.css';\r\nimport 'swiper/components/navigation/navigation.min.css';\r\nimport '../styles/custom-swiper.scss';\r\nimport SwiperCore, { Navigation } from 'swiper/core';\r\nSwiperCore.use([Navigation]);\r\nconst Playlist = (props: any) => {\r\n  const history = useHistory();\r\n  const [personalPlaylists, setPersonalPlaylists] = useState<any[]>([]);\r\n  const [isLoadingPersonalPlaylists, setIsLoadingPersonalPlaylists] =\r\n    useState<boolean>(true);\r\n  const [isLoadingPublicPlaylists, setIsLoadingPublicPlaylists] =\r\n    useState<boolean>(true);\r\n  const [publicPlaylists, setPublicPlaylists] = useState<any[]>([]);\r\n  const [inputPlaylistId, setInputPlaylistId] = useState<string>('');\r\n  const [offsetPlaylists, setOffsetPlaylists] = useState<number>(0);\r\n  const [isLoadMorePlaylists, setLoadMorePlaylists] = useState<boolean>(false);\r\n  enum playlistType {\r\n    public,\r\n    personal,\r\n  }\r\n  enum trackType {\r\n    playlist,\r\n    top,\r\n  }\r\n  const fetchPlaylists = (pType: playlistType) => {\r\n    const reqUrl =\r\n      pType === playlistType.public\r\n        ? 'https://api.spotify.com/v1/browse/categories/toplists/playlists'\r\n        : 'https://api.spotify.com/v1/me/playlists';\r\n    axios\r\n      .get(reqUrl, {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(name,images,id)',\r\n          response_type: constants.response_type,\r\n          limit: constants.playlists_page_size,\r\n          offset: pType === playlistType.public ? 0 : offsetPlaylists,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        let _playlists: { img: any; id: any; name: any }[] = [];\r\n        if (res.data) {\r\n          const items =\r\n            pType === playlistType.public\r\n              ? res.data.playlists.items\r\n              : res.data.items;\r\n          items.forEach((item: any) => {\r\n            _playlists.push({\r\n              img: item.images[0].url,\r\n              id: item.id,\r\n              name: item.name,\r\n            });\r\n          });\r\n        }\r\n        if (pType === playlistType.public) {\r\n          setPublicPlaylists(_playlists);\r\n          setIsLoadingPublicPlaylists(false);\r\n        } else {\r\n          setLoadMorePlaylists(\r\n            offsetPlaylists + constants.playlists_page_size < res.data?.total\r\n          );\r\n          setOffsetPlaylists(offsetPlaylists + constants.playlists_page_size);\r\n          setPersonalPlaylists((playlists: any) => [\r\n            ...playlists,\r\n            ..._playlists,\r\n          ]);\r\n          setIsLoadingPersonalPlaylists(false);\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const fetchTracks = (tType: trackType, id: String) => {\r\n    const reqUrl =\r\n      tType === trackType.playlist\r\n        ? `https://api.spotify.com/v1/playlists/${id}/tracks`\r\n        : 'https://api.spotify.com/v1/me/top/tracks';\r\n    const reqParams =\r\n      tType === trackType.playlist\r\n        ? {\r\n            client_id: constants.client_id,\r\n            fields: 'items(track(album(images,id))),total',\r\n            response_type: constants.response_type,\r\n            limit: constants.tracks_page_size,\r\n            offset: 0,\r\n          }\r\n        : {\r\n            time_range: id,\r\n            limit: constants.top_tracks_page_size,\r\n            offset: 0,\r\n          };\r\n    axios\r\n      .get(reqUrl, {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: reqParams,\r\n      })\r\n      .then((res: any) => {\r\n        if (res.data?.items) {\r\n          if (\r\n            res.data.total > constants.tracks_page_size &&\r\n            tType === trackType.playlist\r\n          ) {\r\n            props.setFetchMoreUrl(\r\n              `https://api.spotify.com/v1/playlists/${id}/tracks`\r\n            );\r\n          } else {\r\n            props.setFetchMoreUrl(null);\r\n          }\r\n          const _tracks: { id: string; img: string; avgColour: any }[] = [];\r\n          const fac = new FastAverageColor();\r\n          const uniqueTracks: any[] = [];\r\n          res.data.items.forEach((item: any) => {\r\n            if (tType === trackType.playlist) {\r\n              if (\r\n                !uniqueTracks.find(\r\n                  (u) => u.track.album.id === item.track.album.id\r\n                )\r\n              ) {\r\n                uniqueTracks.push(item);\r\n              }\r\n            } else {\r\n              if (!uniqueTracks.find((u) => u.album.id === item.album.id)) {\r\n                uniqueTracks.push(item);\r\n              }\r\n            }\r\n          });\r\n          if (tType === trackType.playlist) props.setUniqueTracks(uniqueTracks);\r\n          uniqueTracks.forEach((item: any) => {\r\n            const trackItem = tType === trackType.playlist ? item.track : item;\r\n            fac.getColorAsync(trackItem.album.images[2].url).then((color) => {\r\n              _tracks.push({\r\n                id: trackItem.album.id,\r\n                img: trackItem.album.images[2].url,\r\n                avgColour: color.value,\r\n              });\r\n              if (_tracks.length === uniqueTracks.length) {\r\n                props.setTracks(_tracks);\r\n                if (props.returnToMosaic) {\r\n                  history.push(constants.create_mosaic_url);\r\n                } else {\r\n                  history.push(constants.select_image_url);\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let stateRes: string | undefined = '';\r\n    if (window.location.hash.includes(constants.state_res)) {\r\n      stateRes = window.location.hash\r\n        .split(constants.state_res)\r\n        .pop()\r\n        ?.split('&')[0];\r\n    }\r\n    if (\r\n      stateRes === localStorage.getItem('authState') &&\r\n      window.location.hash.includes(constants.access_token)\r\n    ) {\r\n      const token = window.location.hash\r\n        .split(constants.access_token)\r\n        .pop()\r\n        ?.split('&')[0];\r\n      if (token) localStorage.setItem('token', token);\r\n      props.setToken(token);\r\n    } else {\r\n      props.setToken(localStorage.getItem('token'));\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (props.token) {\r\n      fetchPlaylists(playlistType.public);\r\n      fetchPlaylists(playlistType.personal);\r\n    }\r\n  }, [props.token]);\r\n  const useStyles = makeStyles({\r\n    marginLeft: { marginLeft: '0.5rem' },\r\n    txtPlaylistUrl: { marginRight: '0.5rem', flexBasis: '50%' },\r\n    width100: { width: '100%' },\r\n    playlistImage: {\r\n      maxHeight: '14vw',\r\n      maxWidth: '14vw',\r\n    },\r\n    playlistInputContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      width: '100%',\r\n    },\r\n    txtFlex: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      textAlign: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    swiperSlide: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      cursor: 'pointer',\r\n    },\r\n    loadMore: {\r\n      border: '0.1rem solid black',\r\n      height: '14vw',\r\n      width: '14vw',\r\n    },\r\n    playlistContainer: {\r\n      display: 'flex',\r\n      width: '100%',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    publicContainer: {\r\n      flexDirection: 'column',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '83%',\r\n    },\r\n    topTracksContainer: {\r\n      flexDirection: 'column',\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      textAlign: 'center',\r\n      alignItems: 'center',\r\n      width: '17%',\r\n      height: '100%',\r\n    },\r\n    btnTopTrackContainer: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      height: '100%',\r\n    },\r\n    btnTopTracks: { width: '100%', margin: '0.5rem' },\r\n    loadingContainer: {\r\n      position: 'absolute',\r\n      left: '50%',\r\n      top: '50%',\r\n      transform: 'translate(-50%,-50%)',\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  const yourTopTrackStrings = [\r\n    { id: 'short_term', text: 'Short Term' },\r\n    { id: 'medium_term', text: 'Medium Term' },\r\n    { id: 'long_term', text: 'Long Term' },\r\n  ];\r\n  return (\r\n    <>\r\n      {isLoadingPersonalPlaylists || isLoadingPublicPlaylists ? (\r\n        <div className={classes.loadingContainer}>\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className={classes.playlistContainer}>\r\n            <div className={`${classes.publicContainer} `}>\r\n              <h2>Public Playlists</h2>\r\n              <Swiper\r\n                slidesPerView={5}\r\n                navigation={true}\r\n                className={classes.width100}\r\n              >\r\n                {publicPlaylists.map((item: any, index: any) => {\r\n                  return (\r\n                    <SwiperSlide\r\n                      className={`${classes.swiperSlide}`}\r\n                      key={`swiper-slider-${index} `}\r\n                      onClick={() => {\r\n                        setInputPlaylistId(item.id);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className={`${classes.playlistImage}`}\r\n                        key={`img-${index}`}\r\n                        src={item.img}\r\n                        alt=\"album cover\"\r\n                      ></img>\r\n                      <p className={classes.txtFlex}>{item.name}</p>\r\n                    </SwiperSlide>\r\n                  );\r\n                })}\r\n              </Swiper>\r\n            </div>\r\n            <div className={`${classes.topTracksContainer} `}>\r\n              <h2>Your Top Tracks</h2>\r\n              <div className={classes.btnTopTrackContainer}>\r\n                {yourTopTrackStrings.map((item: any) => {\r\n                  return (\r\n                    <Button\r\n                      className={`${classes.btnTopTracks}`}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => {\r\n                        fetchTracks(trackType.top, item.id);\r\n                      }}\r\n                    >\r\n                      {item.text}\r\n                    </Button>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>{' '}\r\n          </div>{' '}\r\n          <h2>Your Playlists</h2>\r\n          <Swiper\r\n            slidesPerView={6}\r\n            navigation={true}\r\n            className={classes.width100}\r\n          >\r\n            {personalPlaylists.map((item: any, index: any) => {\r\n              return (\r\n                <SwiperSlide\r\n                  className={`${classes.swiperSlide}`}\r\n                  key={`swiper-slider-${index} `}\r\n                  onClick={() => {\r\n                    setInputPlaylistId(item.id);\r\n                  }}\r\n                >\r\n                  <img\r\n                    className={`${classes.playlistImage}`}\r\n                    key={`img-${index}`}\r\n                    src={item.img}\r\n                    alt=\"album cover\"\r\n                  ></img>\r\n                  <p className={classes.txtFlex}>{item.name}</p>\r\n                </SwiperSlide>\r\n              );\r\n            })}\r\n            {isLoadMorePlaylists ? (\r\n              <SwiperSlide\r\n                className={`${classes.swiperSlide}`}\r\n                onClick={() => fetchPlaylists(playlistType.personal)}\r\n              >\r\n                <div className={`${classes.loadMore} ${classes.txtFlex}`}>\r\n                  <p>Load More</p>\r\n                </div>\r\n                <p></p>\r\n              </SwiperSlide>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Swiper>\r\n          <div className={classes.playlistInputContainer}>\r\n            <TextField\r\n              label=\"Enter Playlist ID\"\r\n              helperText=\"e.g. 37i9dQZEVXbNG2KDcFcKOF\"\r\n              onChange={(e) => setInputPlaylistId(e.target.value)}\r\n              className={classes.txtPlaylistUrl}\r\n              value={inputPlaylistId}\r\n            />\r\n            <Button\r\n              className={classes.marginLeft}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => fetchTracks(trackType.playlist, inputPlaylistId)}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Playlist;\r\n","import { Button, makeStyles } from '@material-ui/core';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\nimport axios from 'axios';\r\nimport * as constants from '../constants';\r\nimport FastAverageColor from 'fast-average-color';\r\n\r\nconst Mosaic = (props: any) => {\r\n  const [width, setWidth] = useState(0);\r\n  const [height, setHeight] = useState(0);\r\n  const [offset, setOffset] = useState(100);\r\n  const [isLoadingMosaic, setIsLoadingMosaic] = useState(true);\r\n  const [selectedTrackImage, setSelectedTrackImage] = useState<any>();\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const mosaicCanvasRef = useRef<HTMLCanvasElement | null>(null);\r\n  const history = useHistory();\r\n  const [value, setValue] = useState<number>(10);\r\n  const handleChange = (event: any, newValue: number | number[]) => {\r\n    setValue(newValue as number);\r\n  };\r\n  const selectImage = (img: any) => {\r\n    let height = img.height;\r\n    let width = img.width;\r\n\r\n    if (width * height > 10000) {\r\n      let size = width * height;\r\n      let modifier = Math.sqrt(size / 10000);\r\n      img.height /= modifier;\r\n      img.width /= modifier;\r\n      setHeight(img.height);\r\n      setWidth(img.width);\r\n    }\r\n    const ctx = canvasRef.current?.getContext('2d');\r\n    draw(ctx, img);\r\n  };\r\n  let count = 0;\r\n  const onLoadCallback = (img: any) => {\r\n    count++;\r\n    if (count === img.width * img.height) {\r\n      if (mosaicCanvasRef.current) {\r\n        setSelectedTrackImage(mosaicCanvasRef.current.toDataURL());\r\n        count = 0;\r\n        setIsLoadingMosaic(false);\r\n      }\r\n    }\r\n  };\r\n  const draw = (ctx: any, img: { width: number; height: number }) => {\r\n    ctx.drawImage(img, 0, 0, img.width, img.height);\r\n    const mosaicCanvas = mosaicCanvasRef.current?.getContext('2d');\r\n    for (let y = 0; y < img.height; y++) {\r\n      for (let x = 0; x < img.width; x++) {\r\n        let pixelA = [...ctx.getImageData(x, y, 1, 1).data];\r\n        pixelA[3] /= 255;\r\n        for (let v = 0; v < 3; v++) {\r\n          pixelA[v] = (pixelA[v] * pixelA[3]) / 255;\r\n        }\r\n        let minDist = -1;\r\n        let index = 0;\r\n        for (let i = 0; i < props.tracks.length; i++) {\r\n          let pixelB = [...props.tracks[i].avgColour];\r\n          pixelB[3] /= 255;\r\n          for (let v = 0; v < 3; v++) {\r\n            pixelB[v] = (pixelB[v] * pixelB[3]) / 255;\r\n          }\r\n          let dist =\r\n            Math.max(\r\n              Math.pow(pixelA[0] - pixelB[0], 2),\r\n              Math.pow(pixelA[0] - pixelB[0] - pixelA[3] + pixelB[3], 2)\r\n            ) +\r\n            Math.max(\r\n              Math.pow(pixelA[1] - pixelB[1], 2),\r\n              Math.pow(pixelA[1] - pixelB[1] - pixelA[3] + pixelB[3], 2)\r\n            ) +\r\n            Math.max(\r\n              Math.pow(pixelA[2] - pixelB[2], 2),\r\n              Math.pow(pixelA[2] - pixelB[2] - pixelA[3] + pixelB[3], 2)\r\n            );\r\n          if (minDist === -1) {\r\n            minDist = dist;\r\n            index = i;\r\n          } else if (dist < minDist) {\r\n            minDist = dist;\r\n            index = i;\r\n          }\r\n        }\r\n        let album = new Image();\r\n        album.crossOrigin = 'anonymous';\r\n        album.src = props.tracks[index].img;\r\n        album.onload = () => {\r\n          mosaicCanvas?.drawImage(\r\n            album,\r\n            x * 64,\r\n            y * 64,\r\n            album.width,\r\n            album.height\r\n          );\r\n          onLoadCallback(img);\r\n        };\r\n      }\r\n    }\r\n  };\r\n  const fetchMoreTracks = () => {\r\n    axios\r\n      .get(props.fetchMoreUrl, {\r\n        headers: { Authorization: `Bearer ${props?.token}` },\r\n        params: {\r\n          client_id: constants.client_id,\r\n          fields: 'items(track(album(images,id))),total',\r\n          response_type: constants.response_type,\r\n          limit: 100,\r\n          offset: offset,\r\n        },\r\n      })\r\n      .then((res: any) => {\r\n        if (res.data?.items) {\r\n          if (res.data.total > offset + 100) {\r\n            setOffset(offset + 100);\r\n          } else {\r\n            props.setFetchMoreUrl(null);\r\n          }\r\n          const _tracks: { id: string; img: string; avgColour: any }[] = [];\r\n          const fac = new FastAverageColor();\r\n          const uniqueTracks: any[] = props.uniqueTracks;\r\n          res.data.items.forEach((item: any) => {\r\n            if (\r\n              !uniqueTracks.find(\r\n                (u) => u.track.album.id === item.track.album.id\r\n              )\r\n            ) {\r\n              uniqueTracks.push(item);\r\n            }\r\n          });\r\n          props.setUniqueTracks(uniqueTracks);\r\n          uniqueTracks.forEach((item: any) => {\r\n            fac.getColorAsync(item.track.album.images[2].url).then((color) => {\r\n              _tracks.push({\r\n                id: item.track.album.id,\r\n                img: item.track.album.images[2].url,\r\n                avgColour: color.value,\r\n              });\r\n              if (_tracks.length === uniqueTracks.length) {\r\n                props.setTracks([...props.tracks, ..._tracks]);\r\n                setIsLoadingMosaic(true);\r\n              }\r\n            });\r\n          });\r\n        }\r\n      })\r\n      .catch((err: any) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.imageSrc) {\r\n      let img = new Image();\r\n      img.src = props.imageSrc;\r\n      img.onload = () => {\r\n        selectImage(img);\r\n      };\r\n    }\r\n  }, [props.img, props.tracks]);\r\n\r\n  const useStyles = makeStyles({\r\n    scrollContainer: {\r\n      maxHeight: '100%',\r\n      maxWidth: '100%',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    outerContainer: {\r\n      display: 'grid',\r\n      gridTemplateRows: 'auto 1fr',\r\n      height: '100%',\r\n    },\r\n    mosaicContainer: {\r\n      display: 'grid',\r\n      gridTemplateRows: '1fr auto',\r\n      height: '100%',\r\n      minHeight: '0',\r\n    },\r\n    buttonContainer: {\r\n      display: 'flex',\r\n      margin: '2rem 1.5rem',\r\n      overflowX: 'auto',\r\n      '& > *': {\r\n        margin: '0 0.5rem',\r\n      },\r\n    },\r\n    sliderContainer: {\r\n      margin: '2rem 4rem',\r\n    },\r\n    loadingContainer: {\r\n      position: 'absolute',\r\n      left: '50%',\r\n      top: '50%',\r\n      transform: 'translate(-50%,-50%)',\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.outerContainer}>\r\n      <div className={classes.buttonContainer}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            props.setReturnToMosaic(true);\r\n            history.push(constants.select_playlist_url);\r\n          }}\r\n        >\r\n          Select New Playlist\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            history.push(constants.select_image_url);\r\n          }}\r\n        >\r\n          Upload New Image\r\n        </Button>\r\n        <Button\r\n          disabled={isLoadingMosaic || props.fetchMoreUrl === null}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={fetchMoreTracks}\r\n        >\r\n          Fetch More Tracks\r\n        </Button>\r\n        <Button\r\n          disabled={isLoadingMosaic}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => {\r\n            const link = document.createElement('a');\r\n            link.href = selectedTrackImage;\r\n            link.setAttribute('download', 'mosaic.png'); //or any other extension\r\n            document.body.appendChild(link);\r\n            link.click();\r\n          }}\r\n        >\r\n          Download Mosaic\r\n        </Button>\r\n      </div>\r\n\r\n      <canvas hidden ref={canvasRef} width={width} height={height}></canvas>\r\n      <canvas\r\n        hidden\r\n        ref={mosaicCanvasRef}\r\n        width={width * 64}\r\n        height={height * 64}\r\n      ></canvas>\r\n      {isLoadingMosaic ? (\r\n        <div className={classes.loadingContainer}>\r\n          <CircularProgress />\r\n        </div>\r\n      ) : (\r\n        <div className={classes.mosaicContainer}>\r\n          <ScrollContainer className={classes.scrollContainer}>\r\n            <img\r\n              src={selectedTrackImage}\r\n              width={width * value}\r\n              height={height * value}\r\n              alt=\"mosaic\"\r\n            ></img>\r\n          </ScrollContainer>\r\n          <div className={classes.sliderContainer}>\r\n            <Slider\r\n              value={value}\r\n              onChange={handleChange}\r\n              aria-labelledby=\"continuous-slider\"\r\n              min={1}\r\n              max={64}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Mosaic;\r\n","export default __webpack_public_path__ + \"static/media/spotify.43abc2c0.png\";","import * as constants from '../constants';\r\nimport Button from '@material-ui/core/Button';\r\nimport spotifyMosaicImg from '../assets/spotify.png';\r\nimport ScrollContainer from 'react-indiana-drag-scroll';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst ConnectToSpotify = () => {\r\n  const connectToSpotify = () => {\r\n    const authState = String(Math.floor(Math.random() * 10000000));\r\n    localStorage.setItem('authState', authState);\r\n    window.location.href = `https://accounts.spotify.com/authorize?client_id=${constants.client_id}&response_type=${constants.response_type}&scope=${constants.scopes}&state=${authState}&redirect_uri=${constants.redirect_uri}`;\r\n  };\r\n\r\n  const useStyles = makeStyles({\r\n    scrollContainer: {\r\n      maxHeight: '80%',\r\n      maxWidth: '70%',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    spotifyImg: { height: '100vh', width: '100vh' },\r\n    btnConnect: { margin: '2rem' },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <h1>Spotify Mosaic</h1>\r\n      <ScrollContainer className={classes.scrollContainer}>\r\n        <img\r\n          src={spotifyMosaicImg}\r\n          className={classes.spotifyImg}\r\n          alt=\"Spotify Mosaic\"\r\n        ></img>\r\n      </ScrollContainer>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={connectToSpotify}\r\n        className={classes.btnConnect}\r\n      >\r\n        Connect to Spotify\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\nexport default ConnectToSpotify;\r\n","import { Button } from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as constants from '../constants';\r\n\r\nconst SelectImage = (props: any) => {\r\n  const history = useHistory();\r\n\r\n  const onFileUpload = (e: any) => {\r\n    if (e.target.files.length > 0) {\r\n      let file = e.target.files[0];\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = async (_) => {\r\n        let imgData = reader.result;\r\n        await convertToString(imgData);\r\n        history.push(constants.create_mosaic_url);\r\n      };\r\n    }\r\n  };\r\n  const convertToString = (imgData: any) => {\r\n    props.createImg(imgData);\r\n  };\r\n  return (\r\n    <>\r\n      <Button variant=\"contained\" color=\"primary\" component=\"label\">\r\n        Select Image\r\n        <input hidden onChange={onFileUpload} type=\"file\" accept=\"image/*\" />\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\nexport default SelectImage;\r\n","import { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Playlist from './components/select-playlist';\r\nimport { useEffect, useState } from 'react';\r\nimport Mosaic from './components/mosaic';\r\nimport ConnectToSpotify from './components/connect-to-spotify';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport SelectImage from './components/select-image';\r\nimport * as constants from './constants';\r\nimport ReactGA from 'react-ga4';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();\r\nhistory.listen((location) => {\r\n  ReactGA.send(location.pathname + location.search);\r\n});\r\nconst App = () => {\r\n  const [imageSrc, setImageSrc] = useState<any>();\r\n  const [fetchMoreUrl, setFetchMoreUrl] = useState<string | null>(null);\r\n  const [uniqueTracks, setUniqueTracks] = useState<any[]>([]);\r\n  const [token, setToken] = useState<string>('');\r\n  const [tracks, setTracks] = useState<any[]>([\r\n    { id: '', img: '', avgColour: null },\r\n  ]);\r\n  const [returnToMosaic, setReturnToMosaic] = useState<boolean>(false);\r\n\r\n  const createImg = (imageSrc: any) => {\r\n    setImageSrc(imageSrc);\r\n  };\r\n  useEffect(() => {\r\n    ReactGA.initialize('G-JQQCW8E695');\r\n  }, []);\r\n  const useStyles = makeStyles({\r\n    center: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      height: '100%',\r\n      width: '100%',\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route path={constants.select_playlist_url}>\r\n          <div className={classes.center}>\r\n            <Playlist\r\n              setToken={setToken}\r\n              token={token}\r\n              setTracks={setTracks}\r\n              returnToMosaic={returnToMosaic}\r\n              setFetchMoreUrl={setFetchMoreUrl}\r\n              setUniqueTracks={setUniqueTracks}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/:access_token(access_token=.*)\">\r\n          <div className={classes.center}>\r\n            <Playlist\r\n              setToken={setToken}\r\n              token={token}\r\n              setTracks={setTracks}\r\n              returnToMosaic={returnToMosaic}\r\n              setFetchMoreUrl={setFetchMoreUrl}\r\n              setUniqueTracks={setUniqueTracks}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path={constants.select_image_url}>\r\n          <div className={classes.center}>\r\n            <SelectImage createImg={(src: any) => createImg(src)} />\r\n          </div>\r\n        </Route>\r\n        <Route path={constants.create_mosaic_url}>\r\n          <Mosaic\r\n            fetchMoreUrl={fetchMoreUrl}\r\n            setFetchMoreUrl={setFetchMoreUrl}\r\n            token={token}\r\n            tracks={tracks}\r\n            imageSrc={imageSrc}\r\n            setReturnToMosaic={setReturnToMosaic}\r\n            setUniqueTracks={setUniqueTracks}\r\n            uniqueTracks={uniqueTracks}\r\n            setTracks={setTracks}\r\n          />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <div className={classes.center}>\r\n            <ConnectToSpotify />\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}